package de.culture4life.luca.testing.provider.opentestcheck;

import de.culture4life.luca.registration.RegistrationData;
import de.culture4life.luca.testing.TestResultParsingException;
import de.culture4life.luca.testing.TestResultVerificationException;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.annotation.Config;

import androidx.test.runner.AndroidJUnit4;

import static org.junit.Assert.assertEquals;

@Config(sdk = 28)
@RunWith(AndroidJUnit4.class)
public class OpenTestCheckTestResultProviderTest {

    public static final String VALID_TEST_RESULT = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ2IjoyLCJuIjoiYTZhODVkODUyZTA1OTFkZjM2ODUwZTFmMDc1MTFkZWE0MmFjYjAxMjljNzFkZjk1ZTM2YWVkNzhkYWU5ZTNhOCIsInQiOjE2MjAyNzU3NDAsImMiOiJwIiwiciI6InAiLCJsIjoiQ292aW1lZGljYWwgR21iSCIsImQiOiJQcm9mLiBIYW5zIiwiZWQiOiJpTHhpSFZzck5oZFh6UDNoeEZkd1p3Z1ludDVGTUYzVXo3MmJHOHMxcytxV2hzZEgxeGJ4R1Z0SHZzbVwvZkRLXC9zWUczdVwvR0pKd3BXTldSZ2xHOGs0SnhyKytCeDBwWStudjlqb0diWm5lWEt4Ulp6T3RSWnlxeEY2cExrIn0.WocR6aa8EX1WEOKxES_gFnvfJnrg6xLzm1cwZ453StqubQPlMjG-JdZofVa4NgTRUCrxDvcQd8M-wQxksM79Dpy0_tOP2mHA59V5LTsVSVzk7teS6cTGhy1nGqZIfu3ORvOqTvxJmuBtT-Z8TGnJzkTTMNx_t8mPSBTHCJX9YQE0APXSnusiy5LF4iQTpYrgKEH0IZTT4gIx6-SbNpkuVmJE6RxVvjAdnlnTS6lqtr9jplaNw8L6gDw5s0zZ5z8xytuWvceRap_GOTeCxdmg-8f4EghjMJFea8T5WwfZY4BDJbEawsAcOY-ErS4Ey3M_W8PYaPTZWmClOiJGsCeU8w";
    public static final String VALID_TEST_RESULT_2 = "https://testverify.io/v1#eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ2IjoyLCJuIjoiYTZhODVkODUyZTA1OTFkZjM2ODUwZTFmMDc1MTFkZWE0MmFjYjAxMjljNzFkZjk1ZTM2YWVkNzhkYWU5ZTNhOCIsInQiOjE2MjAyNzU3NDAsImMiOiJwIiwiciI6InAiLCJsIjoiQ292aW1lZGljYWwgR21iSCIsImQiOiJQcm9mLiBIYW5zIiwiZWQiOiJpTHhpSFZzck5oZFh6UDNoeEZkd1p3Z1ludDVGTUYzVXo3MmJHOHMxcytxV2hzZEgxeGJ4R1Z0SHZzbVwvZkRLXC9zWUczdVwvR0pKd3BXTldSZ2xHOGs0SnhyKytCeDBwWStudjlqb0diWm5lWEt4Ulp6T3RSWnlxeEY2cExrIn0.WocR6aa8EX1WEOKxES_gFnvfJnrg6xLzm1cwZ453StqubQPlMjG-JdZofVa4NgTRUCrxDvcQd8M-wQxksM79Dpy0_tOP2mHA59V5LTsVSVzk7teS6cTGhy1nGqZIfu3ORvOqTvxJmuBtT-Z8TGnJzkTTMNx_t8mPSBTHCJX9YQE0APXSnusiy5LF4iQTpYrgKEH0IZTT4gIx6-SbNpkuVmJE6RxVvjAdnlnTS6lqtr9jplaNw8L6gDw5s0zZ5z8xytuWvceRap_GOTeCxdmg-8f4EghjMJFea8T5WwfZY4BDJbEawsAcOY-ErS4Ey3M_W8PYaPTZWmClOiJGsCeU8w";
    public static final String UNSUPPORTED_TEST_RESULT = "iLxiHVsrNhdXzP3hxFdwZwgYnt5FMF3Uz72bG8s1s+qWhsdH1xbxGVtHvsm/fDK/sYG3u/GJJwpWNWRglG8k4Jxr++Bx0pY+nv9joGbZneXKxRZzOtRZyqxF6pLk";
    public static final String UNVERIFIED_TEST_RESULT = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ2IjoyLCJuIjoiYTZhODVkODUyZTA1OTFkZjM2ODUwZTFmMDc1MTFkZWE0MmFjYjAxMjljNzFkZjk1ZTM2YWVkNzhkYWU5ZTNhOCIsInQiOjE2MjAyNzU3NDAsImMiOiJwIiwiciI6InAiLCJsIjoiQ292aW1lZGljYWwgR21iSCIsImQiOiJQcm9mLiBIYW5zIiwiZWQiOiJpTHhpSFZzck5oZFh6UDNoeEZkd1p3Z1ludDVGTUYzVXo3MmJHOHMxcytxV2hzZEgxeGJ4R1Z0SHZzbVwvZkRLXC9zWUczdVwvR0pKd3BXTldSZ2xHOGs0SnhyKytCeDBwWStudjlqb0diWm5lWEt4Ulp6T3RSWnlxeEY2cExrIn0.WocR6aa8EX1WEOKxES_gFnvfJnrg6xLzm1cwZ453StqubQPlMjG-JdZofVa4NgTRUCrxDvcQd8M-wQxksM79Dpy0_tOP2mHA59V5LTsVSVzk7teS6cTGhy1nGqZIfu3ORvOqTvxJmuBtT-Z8TGnJzkTTMNx_t8mPSBTHCJX9YQE0APXSnusiy5LF4iQTpYrgKEH0IZTT4gIx6-SbNpkuVmJE6RxVvjAdnlnTS6lqtr9jplaNw8L6gDw5s0zZ5z8xytuWvceRap_GOTeCxdmg-8f4EghjMJFea8T5WwfZY4BDJbEawsAcOY-ErS4Ey3M_W8PYaPTZWmClOiJGsCeabc";

    private OpenTestCheckTestResultProvider testResultProvider;

    @Before
    public void setUp() {
        testResultProvider = new OpenTestCheckTestResultProvider();
    }

    @Test
    public void canParse_validData_emitsTrue() {
        testResultProvider.canParse(VALID_TEST_RESULT)
                .test()
                .assertValue(true);
    }

    @Test
    public void canParse_validData2_emitsTrue() {
        testResultProvider.canParse(VALID_TEST_RESULT_2)
                .test()
                .assertValue(true);
    }

    @Test
    public void canParse_invalidData_emitsFalse() {
        testResultProvider.canParse(UNSUPPORTED_TEST_RESULT)
                .test()
                .assertValue(false);
    }

    @Test
    public void parse_validData_parsesData() {
        testResultProvider.parse(VALID_TEST_RESULT)
                .test()
                .assertValue(testResult -> {
                    assertEquals((Integer) 2, testResult.v);
                    assertEquals("a6a85d852e0591df36850e1f07511dea42acb0129c71df95e36aed78dae9e3a8", testResult.n);
                    assertEquals((Integer) 1620275740, testResult.t);
                    assertEquals("p", testResult.c);
                    assertEquals("p", testResult.r);
                    assertEquals("Covimedical GmbH", testResult.l);
                    assertEquals("Prof. Hans", testResult.d);
                    assertEquals("iLxiHVsrNhdXzP3hxFdwZwgYnt5FMF3Uz72bG8s1s+qWhsdH1xbxGVtHvsm/fDK/sYG3u/GJJwpWNWRglG8k4Jxr++Bx0pY+nv9joGbZneXKxRZzOtRZyqxF6pLk", testResult.ed);
                    return true;
                });
    }

    @Test
    public void parse_validData2_parsesData() {
        testResultProvider.parse(VALID_TEST_RESULT_2)
                .test()
                .assertValue(testResult -> {
                    assertEquals((Integer) 2, testResult.v);
                    assertEquals("a6a85d852e0591df36850e1f07511dea42acb0129c71df95e36aed78dae9e3a8", testResult.n);
                    assertEquals((Integer) 1620275740, testResult.t);
                    assertEquals("p", testResult.c);
                    assertEquals("p", testResult.r);
                    assertEquals("Covimedical GmbH", testResult.l);
                    assertEquals("Prof. Hans", testResult.d);
                    assertEquals("iLxiHVsrNhdXzP3hxFdwZwgYnt5FMF3Uz72bG8s1s+qWhsdH1xbxGVtHvsm/fDK/sYG3u/GJJwpWNWRglG8k4Jxr++Bx0pY+nv9joGbZneXKxRZzOtRZyqxF6pLk", testResult.ed);
                    return true;
                });
    }

    @Test
    public void parse_invalidData_emitsError() {
        testResultProvider.parse(UNSUPPORTED_TEST_RESULT)
                .test()
                .assertError(TestResultParsingException.class);
    }

    @Test
    public void validate_validData_completes() {
        RegistrationData registrationData = new RegistrationData();
        registrationData.setFirstName("Jannusch");
        registrationData.setLastName("Barnech");

        testResultProvider.parse(VALID_TEST_RESULT)
                .flatMapCompletable(testResult -> testResultProvider.validate(testResult, registrationData))
                .test()
                .assertComplete();
    }

    @Test
    public void validate_nameMismatch_emitsError() {
        RegistrationData registrationData = new RegistrationData();
        registrationData.setFirstName("Erika");
        registrationData.setLastName("Mustermann");

        testResultProvider.parse(VALID_TEST_RESULT)
                .flatMapCompletable(testResult -> testResultProvider.validate(testResult, registrationData))
                .test()
                .assertError(TestResultVerificationException.class);
    }

    @Test
    public void validate_unverifiedData_emitsError() {
        RegistrationData registrationData = new RegistrationData();
        registrationData.setFirstName("Jannusch");
        registrationData.setLastName("Barnech");

        testResultProvider.parse(UNVERIFIED_TEST_RESULT)
                .flatMapCompletable(testResult -> testResultProvider.validate(testResult, registrationData))
                .test()
                .assertError(TestResultVerificationException.class);
    }

}