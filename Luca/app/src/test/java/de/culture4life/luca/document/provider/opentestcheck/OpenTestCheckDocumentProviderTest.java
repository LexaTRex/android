package de.culture4life.luca.document.provider.opentestcheck;

import com.google.android.gms.common.util.Hex;

import de.culture4life.luca.LucaUnitTest;
import de.culture4life.luca.crypto.CryptoManager;
import de.culture4life.luca.document.DocumentManager;
import de.culture4life.luca.document.DocumentParsingException;
import de.culture4life.luca.document.DocumentVerificationException;
import de.culture4life.luca.history.HistoryManager;
import de.culture4life.luca.network.NetworkManager;
import de.culture4life.luca.network.pojo.DocumentProviderData;
import de.culture4life.luca.preference.PreferencesManager;
import de.culture4life.luca.registration.RegistrationData;
import de.culture4life.luca.registration.RegistrationManager;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.annotation.Config;

import java.nio.charset.StandardCharsets;

import androidx.test.runner.AndroidJUnit4;
import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.core.Single;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;

@Config(sdk = 28)
@RunWith(AndroidJUnit4.class)
public class OpenTestCheckDocumentProviderTest extends LucaUnitTest {

    public static final String VALID_TEST_RESULT_TICKET_IO = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ2IjoyLCJuIjoiMTZhM2U0YjkyY2E0NjYwYzQxYjg4MDU3Mjc2YzM1ZGUzOGI2ZGZlN2FkY2VkMzZjZGUxZjA3OWE2ODY4YTFhMyIsInQiOjE2MjA4MDIwNTIsImMiOiJmIiwiciI6Im4iLCJsIjoiQ292aW1lZGljYWwgR21iSCIsImQiOiJEci4gRGF2aWQiLCJlZCI6ImhvaktYcFErMERhZGpaWWlUdktWWmR6d21WVDcyWHU1R2xZTXNVYnJPN2M3REhZY1c1Y1Y2ajhaalpMRVpGTE9wS3FTK1AzZllzTEJtMzRJMUREV09sR2x6N1RrUHROeG5cL3JhcnN3ZVA0bkhlUzhhcFVsUEdwUnAyVEl2R1E9PSJ9.IKHZusBnGBc12b3by5SL6FXOdeufyU_9arwmx9_L0JOlXXY1Q9HpS5oCzLJ9iy5Wlm7wvYkao6CT49fgaDzmQL4zTubQo7xpJGc19EWIL0z5o_HaYkN74KrxG114VsLLVPgps50MzYv_qvhr0qe5DABHFswUMKGhyLxJyZFsMfMPI4WY-REFO6zWCTg9uS4mLDEXz1weJ_0ZJj4j5jW-3FzX-Hzq9iovLT7PyVIiK318iP0pc7vSP9V-8bvgqnHvinKUEw0FdxjRN0V_Isd8M2E5Xn64TvUeISMd6f5Nk3KytIW5jTaZg_E7z-ldzz5w12ZH3uITx7ocxjahdChE2w";
    public static final String EXPIRED_TEST_RESULT_TICKET_IO = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ2IjoyLCJuIjoiZjQyMGYwMmYxYjk0NjkyZmRkZjkwOTUwNjk4N2U1NDdiYjg2OWMzYWMzMGM5NWQ5MWM3Y2JlNWYxZDJjZjE1ZSIsInQiOjE2MjAxOTQ4NjAsImMiOiJmIiwiciI6Im4iLCJsIjoiTWVkaWNhcmUgR21iSCIsImQiOiJQcm9mLiBEci4gQ29yb25hZmlnaHQiLCJlZCI6IjZheEFvb2tnbEpEYjNLSFpMOERsQXZsa1l1YW5CSVZsUXl3dW5aaFp0QkJcL3hGOUpHdWlBZlwvUmtiQ1pHSmJoaldFQVZoNnh1M3A2Vnhoak8ydFd0c2lPUU9iWHBIZVZJSnBvUmsyNUtiVERmTVJqcGJpUUNoSFwvUU9VSzBBaUJpT2g0PSJ9.ZkMrNZ8YyYsMfoHww3QaA7mZXQksf178boQgnUZn4a29Alc3EbwKVaV-03-xdjzQc5hRpgHx2oa1dxTpnhsdqbAKo8-kKNsRIf_XMzaYaXUO2cKntQDu0dhPimVGP61hFpm6LAL1YUIoIqnsrR2NdS1lBJxWkASwfzGKCNmKKSo8-icoGUQvc0IDDKeMSMNGA2VL2DiVbcCXUFNeYxVfZetBiFgGqTbOjYE4x5aNCopDi0pHzJ_ABSsfG1ECb7B7UOgk8oGwftWAS18eRACrpJzPqyQsGYpNb44Dkvs_ljYoBHRkPcpa2Jw33HBGaMXXf4NqFWQ4laYglW8MP2HBQQ";
    public static final String VALID_TEST_RESULT_TICKET_IO_2 = "https://testverify.io/v1#eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ2IjoyLCJuIjoiYTZhODVkODUyZTA1OTFkZjM2ODUwZTFmMDc1MTFkZWE0MmFjYjAxMjljNzFkZjk1ZTM2YWVkNzhkYWU5ZTNhOCIsInQiOjE2MjAyNzU3NDAsImMiOiJwIiwiciI6InAiLCJsIjoiQ292aW1lZGljYWwgR21iSCIsImQiOiJQcm9mLiBIYW5zIiwiZWQiOiJpTHhpSFZzck5oZFh6UDNoeEZkd1p3Z1ludDVGTUYzVXo3MmJHOHMxcytxV2hzZEgxeGJ4R1Z0SHZzbVwvZkRLXC9zWUczdVwvR0pKd3BXTldSZ2xHOGs0SnhyKytCeDBwWStudjlqb0diWm5lWEt4Ulp6T3RSWnlxeEY2cExrIn0.WocR6aa8EX1WEOKxES_gFnvfJnrg6xLzm1cwZ453StqubQPlMjG-JdZofVa4NgTRUCrxDvcQd8M-wQxksM79Dpy0_tOP2mHA59V5LTsVSVzk7teS6cTGhy1nGqZIfu3ORvOqTvxJmuBtT-Z8TGnJzkTTMNx_t8mPSBTHCJX9YQE0APXSnusiy5LF4iQTpYrgKEH0IZTT4gIx6-SbNpkuVmJE6RxVvjAdnlnTS6lqtr9jplaNw8L6gDw5s0zZ5z8xytuWvceRap_GOTeCxdmg-8f4EghjMJFea8T5WwfZY4BDJbEawsAcOY-ErS4Ey3M_W8PYaPTZWmClOiJGsCeU8w";
    public static final String VALID_TEST_RESULT_TICKET_IO_SPECIAL_CHARS = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ2IjoyLCJuIjoiZjQyMGYwMmYxYjk0NjkyZmRkZjkwOTUwNjk4N2U1NDdiYjg2OWMzYWMzMGM5NWQ5MWM3Y2JlNWYxZDJjZjE1ZSIsInQiOjE2MjA5ODYyNzgsImMiOiJwIiwiciI6InAiLCJsIjoiQ292aW1lZGljYWwgR21iSCIsImQiOiJQcm9mLiBEci4gQ29yb25hZmlnaHQiLCJlZCI6ImJXaitIMkkxbWtUU2hmbVZGSlwvYlFpQWVuRVAyTk44OTFLUEloeDdyNlRTbEdnTndFblVKTERsTVJSYnd3TVJcL0xxOTBldzk2N1o2aWozc3NYcjYyaXprWVU0bG96NWh1WWZUSVI2TndkQktJWCt3cXloTVE0VjBPcU5kekc3WW1rb0k9In0.BJXB91NB0RDQhgx2nrvUltasO-7OgT_7Ll9JxguS_TuLmIwrTJZ0yeurIChCYqK6j4xWnlpt-BzuW_a7ZSrgOVILxSZ7UUBGjXlEdfJAyudWDiAIVg_h_yA0TPK2R7Ngpope3AaY5wjj99CairtugPB1Bb3a7hn_Hmx8nrqCUVMsEqlZC42DaKxnGyjJT2tTNrc9SZ9SUvCSTSEbcNVTROqfszl5rfe7AfHtR_OK2gQhs56DFB1YYznkIP4Wz6PJMPjKT6sC6WPgb08vh4eunm_RH_b4kbd4qTioTqBEJWDI_lKthpb6sXtnWbgzeQA7FpkfEKjmhTJbkPZ_wuPmlA";
    public static final String UNSUPPORTED_TEST_RESULT = "iLxiHVsrNhdXzP3hxFdwZwgYnt5FMF3Uz72bG8s1s+qWhsdH1xbxGVtHvsm/fDK/sYG3u/GJJwpWNWRglG8k4Jxr++Bx0pY+nv9joGbZneXKxRZzOtRZyqxF6pLk";
    public static final String UNVERIFIED_TEST_RESULT = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ2IjoyLCJuIjoiMjUwYmNjZmZkMWNiNWZlYWY0ODRmZGEzM2Y5NDdiM2Q4ZDcwMDA4M2ZmMjVlMGQ2NGQxMjk3NDQ0MWUzZTM4NCIsInQiOjE2MjA4MDIwMTQsImMiOiJvIiwiciI6Im4iLCJsIjoiQ292aW1lZGljYWwgR21iSCIsImQiOiJEci4gRGF2aWQiLCJlZCI6Iko5Mko3NUkyTXhWTzVVQUVSZHMrTDlybjZoZ0lndVNHUlVhT1RzdElGR1wvbHNDRTBpQ0VLTlZvR0JxMnlpeWpKck0yeFM4ZjhteXJnTUU2Z2V4bHdCeEFGbmpBQ1NoMmRTRU4zK0JiaUxqM1k3U2FmcTQraTJYa0RPZz09In0.n1I0PL7TA7o_8dkS1MM3rxvO3tJEgxz5N4YjPSeb7hRmyhIY-IFW0zMZxSZ4zl4vBUMgBAh5yQgseSlcLZX1xsBs6okr2nuaVtUGNOib79qSMfQBAksc3N47NCqD3VFyqJAzmQjw2KJNZA8dcGau72FIYI-U-9lxmD-J2VWw01kn8wNgGGaAd4xBp9DszEijvtOvr6B6OjyUzsGN-aI55ZCeIgoG50CtiwcM-3zW2s5kN_ph7RR_LRCVVo3oUjlxz3DPrukNOSivaDIZ55CXy-Q6VuSfSuywukw5fRHB8ROUbvjb0wL9uupPJyUhI_KkEKt894UweRJD895HH";

    private OpenTestCheckDocumentProvider testResultProvider;
    private RegistrationData registrationData;

    @Before
    public void setUp() {
        PreferencesManager preferencesManager = spy(new PreferencesManager());
        NetworkManager networkManager = spy(new NetworkManager());
        HistoryManager historyManager = spy(new HistoryManager(preferencesManager));
        CryptoManager cryptoManager = spy(new CryptoManager(preferencesManager, networkManager));
        RegistrationManager registrationManager = spy(new RegistrationManager(preferencesManager, networkManager, cryptoManager));
        DocumentManager documentManager = spy(new DocumentManager(preferencesManager, networkManager, historyManager, cryptoManager, registrationManager));

        Observable<DocumentProviderData> documentProviderData = Observable.just(new DocumentProviderData(
                "ticket.io",
                "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqImfTl5rpFHeCM/cjAgeMS8mfhxGxO3+dss+1jidKRJ7ta2fOIQ6k1wPLtqh8U2HHIITXY8Atrlh81s9bSGeJIL9VY/QDeJgqwU147eDLqpO/iF4LvKa13bats+WzN2vXU9vPtk3WNRXh5SktbdMnmK49l20TgjzPac1ES3tv7MSExeF6Bq9zPrG47mUJW+Fm8AH7nID5kBYFosMcsRNVmY4PNYCYM7q17Cc/S/MjFZD+f4mzYLRnMbZs7IjLBGlrood21XHTNt1G6/1f4peA6EWCgKbCgbwdCIHl/wn/ktWOjxoAogX3oRcKOhhCcgt+7ReY8mj2exrTypmN3TscQIDAQAB",
                "6699bad60b76866e7c0fe0a46dcaa3c2"
        ));
        doReturn(documentProviderData).when(documentManager).getDocumentProviderData(any());

        testResultProvider = new OpenTestCheckDocumentProvider(documentManager);
        registrationData = new RegistrationData();
    }

    private void check(String firstName, String lastName, String encodedData) {
        registrationData.setFirstName(firstName);
        registrationData.setLastName(lastName);
        testResultProvider.parse(encodedData)
                .flatMapCompletable(testResult -> testResultProvider.validate(testResult, registrationData)
                        .andThen(testResultProvider.verify(encodedData)))
                .test()
                .assertComplete();
    }

    private void checkForError(String firstName, String lastName, String encodedData, Class<DocumentVerificationException> expectedError) {
        registrationData.setFirstName(firstName);
        registrationData.setLastName(lastName);
        testResultProvider.parse(encodedData)
                .flatMapCompletable(testResult -> testResultProvider.validate(testResult, registrationData)
                        .andThen(testResultProvider.verify(encodedData)))
                .test()
                .assertError(expectedError);
    }

    @Test
    public void canParse_validDataTicketIo_emitsTrue() {
        testResultProvider.canParse(VALID_TEST_RESULT_TICKET_IO)
                .test()
                .assertValue(true);
    }

    @Test
    public void canParse_validDataTicketIo2_emitsTrue() {
        testResultProvider.canParse(VALID_TEST_RESULT_TICKET_IO_2)
                .test()
                .assertValue(true);
    }

    @Test
    public void canParse_invalidData_emitsFalse() {
        testResultProvider.canParse(UNSUPPORTED_TEST_RESULT)
                .test()
                .assertValue(false);
    }

    @Test
    public void parse_validDataTicketIo_parsesData() {
        testResultProvider.parse(VALID_TEST_RESULT_TICKET_IO)
                .test()
                .assertValue(testResult -> {
                    assertEquals((Integer) 2, testResult.v);
                    assertEquals("16a3e4b92ca4660c41b88057276c35de38b6dfe7adced36cde1f079a6868a1a3", testResult.n);
                    assertEquals((Integer) 1620802052, testResult.t);
                    assertEquals("f", testResult.c);
                    assertEquals("n", testResult.r);
                    assertEquals("Covimedical GmbH", testResult.l);
                    assertEquals("Dr. David", testResult.d);
                    assertEquals("hojKXpQ+0DadjZYiTvKVZdzwmVT72Xu5GlYMsUbrO7c7DHYcW5cV6j8ZjZLEZFLOpKqS+P3fYsLBm34I1DDWOlGlz7TkPtNxn/rarsweP4nHeS8apUlPGpRp2TIvGQ==", testResult.ed);
                    return true;
                });
    }

    @Test
    public void parse_validDataTicketIo2_parsesData() {
        testResultProvider.parse(VALID_TEST_RESULT_TICKET_IO_2)
                .test()
                .assertValue(testResult -> {
                    assertEquals((Integer) 2, testResult.v);
                    assertEquals("a6a85d852e0591df36850e1f07511dea42acb0129c71df95e36aed78dae9e3a8", testResult.n);
                    assertEquals((Integer) 1620275740, testResult.t);
                    assertEquals("p", testResult.c);
                    assertEquals("p", testResult.r);
                    assertEquals("Covimedical GmbH", testResult.l);
                    assertEquals("Prof. Hans", testResult.d);
                    assertEquals("iLxiHVsrNhdXzP3hxFdwZwgYnt5FMF3Uz72bG8s1s+qWhsdH1xbxGVtHvsm/fDK/sYG3u/GJJwpWNWRglG8k4Jxr++Bx0pY+nv9joGbZneXKxRZzOtRZyqxF6pLk", testResult.ed);
                    return true;
                });
    }

    @Test
    public void parse_invalidData_emitsError() {
        testResultProvider.parse(UNSUPPORTED_TEST_RESULT)
                .test()
                .assertError(DocumentParsingException.class);
    }

    @Test
    public void check_validDataTicketIo_completes() {
        check("Gianluca", "Frontzek", VALID_TEST_RESULT_TICKET_IO);
    }

    @Test
    public void check_validDataWithSpecialCharTicketIo_completes() {
        check("Gianluca", "Förster", VALID_TEST_RESULT_TICKET_IO_SPECIAL_CHARS);
    }

    @Test
    public void verify_validDataTicketIoWithUrl_completes() {
        testResultProvider.verify(VALID_TEST_RESULT_TICKET_IO_2)
                .test()
                .assertComplete();
    }

    @Test
    public void verify_anyData_fails() {
        testResultProvider.verify("header.payload.signature")
                .test()
                .assertError(DocumentVerificationException.class);
    }

    @Test
    public void generateNameHash_nameWithMultipleSpaces_removesChars() {
        registrationData.setFirstName("Rene");
        registrationData.setLastName("de Candido");
        Single<byte[]> hash = testResultProvider.HASH_PROVIDER.hash("RENEDECANDIDO".getBytes(StandardCharsets.US_ASCII));
        testResultProvider.generateNameHash(registrationData)
                .test()
                .assertValue(Hex.bytesToStringLowercase(hash.blockingGet()));
    }

}