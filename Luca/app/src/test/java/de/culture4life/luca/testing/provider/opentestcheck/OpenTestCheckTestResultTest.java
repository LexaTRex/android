package de.culture4life.luca.testing.provider.opentestcheck;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.annotation.Config;

import androidx.test.runner.AndroidJUnit4;
import io.jsonwebtoken.io.DecodingException;

import static de.culture4life.luca.testing.provider.opentestcheck.OpenTestCheckTestResultProviderTest.VALID_TEST_RESULT_TICKET_IO;

@Config(sdk = 28)
@RunWith(AndroidJUnit4.class)
public class OpenTestCheckTestResultTest {

    @Test
    public void getId_fromDifferentQrCodes_isDifferent() {
        OpenTestCheckTestResult result1 = new OpenTestCheckTestResult(VALID_TEST_RESULT_TICKET_IO);
        OpenTestCheckTestResult result2 = new OpenTestCheckTestResult(OpenTestCheckTestResultProviderTest.VALID_TEST_RESULT_SODA);
        Assert.assertNotEquals(result1.getLucaTestResult().getId(), result2.getLucaTestResult().getId());
    }

    @Test
    public void getId_fromSameQrCodeWithAppendedDots_equals() {
        OpenTestCheckTestResult result1 = new OpenTestCheckTestResult(VALID_TEST_RESULT_TICKET_IO);
        OpenTestCheckTestResult result2 = new OpenTestCheckTestResult(VALID_TEST_RESULT_TICKET_IO + "..");
        Assert.assertEquals(result1.getLucaTestResult().getId(), result2.getLucaTestResult().getId());
    }

    @Test
    public void getHeaderAndBody_fromSimplifiedData_returnsCorrectValue() {
        String headerAndBody = OpenTestCheckTestResult.getHeaderAndBody("header.body.signature");
        Assert.assertEquals("header.body", headerAndBody);
    }

    @Test
    public void getHashableEncodedData_fromSameQrCodeWithAppendedDots_equals() {
        OpenTestCheckTestResult result1 = new OpenTestCheckTestResult(VALID_TEST_RESULT_TICKET_IO);
        OpenTestCheckTestResult result2 = new OpenTestCheckTestResult(VALID_TEST_RESULT_TICKET_IO + "..");
        Assert.assertEquals(result1.getLucaTestResult().getHashableEncodedData(), result2.getLucaTestResult().getHashableEncodedData());
    }

    @Test(expected = DecodingException.class)
    public void constructor_withNonBase64UrlCharacters_throwsDecodingException() {
        String validResultWithSpace = VALID_TEST_RESULT_TICKET_IO.substring(0, 50) + " " + VALID_TEST_RESULT_TICKET_IO.substring(50);
        new OpenTestCheckTestResult(validResultWithSpace);
    }

}