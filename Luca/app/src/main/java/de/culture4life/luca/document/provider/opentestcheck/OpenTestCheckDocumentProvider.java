package de.culture4life.luca.document.provider.opentestcheck;

import com.google.android.gms.common.util.Hex;

import com.nexenio.rxkeystore.RxKeyStore;
import com.nexenio.rxkeystore.provider.hash.RxHashProvider;
import com.nexenio.rxkeystore.provider.hash.Sha256HashProvider;

import de.culture4life.luca.registration.RegistrationData;
import de.culture4life.luca.document.DocumentParsingException;
import de.culture4life.luca.document.DocumentVerificationException;
import de.culture4life.luca.document.provider.DocumentProvider;

import java.nio.charset.StandardCharsets;
import java.security.interfaces.RSAPublicKey;

import androidx.annotation.NonNull;
import io.jsonwebtoken.Jwts;
import io.reactivex.rxjava3.core.BackpressureStrategy;
import io.reactivex.rxjava3.core.Completable;
import io.reactivex.rxjava3.core.Maybe;
import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.core.Single;

import static de.culture4life.luca.document.DocumentVerificationException.Reason.INVALID_SIGNATURE;
import static de.culture4life.luca.document.DocumentVerificationException.Reason.NAME_MISMATCH;

public class OpenTestCheckDocumentProvider extends DocumentProvider<OpenTestCheckDocument> {

    private static final String URL_PREFIX_TESTVERIFY_IO = "https://testverify.io/v1#";
    protected static final RxHashProvider HASH_PROVIDER = new Sha256HashProvider(new RxKeyStore());

    protected static final OpenTestCheckPublicKey[] PUBLIC_KEYS = new OpenTestCheckPublicKey[]{
            new OpenTestCheckPublicKey("ticket.io", "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqImfTl5rpFHeCM/cjAgeMS8mfhxGxO3+dss+1jidKRJ7ta2fOIQ6k1wPLtqh8U2HHIITXY8Atrlh81s9bSGeJIL9VY/QDeJgqwU147eDLqpO/iF4LvKa13bats+WzN2vXU9vPtk3WNRXh5SktbdMnmK49l20TgjzPac1ES3tv7MSExeF6Bq9zPrG47mUJW+Fm8AH7nID5kBYFosMcsRNVmY4PNYCYM7q17Cc/S/MjFZD+f4mzYLRnMbZs7IjLBGlrood21XHTNt1G6/1f4peA6EWCgKbCgbwdCIHl/wn/ktWOjxoAogX3oRcKOhhCcgt+7ReY8mj2exrTypmN3TscQIDAQAB"),
            new OpenTestCheckPublicKey("Soda", "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAu7TJ7bLhg3tvgXwnnTx8IFL80/qGDIuctJR/HN0EzooYooMJi0tauRvokbKOqZ40bPahOUMZheeaueKkzSEyfjqPAXOSNzBe9ltgHQcDWjKUuMIaTJW5w2nJncR5UAOFmuqY8aL5IInu/vVgTjP/mXqWN5JKiEGpA3R7UNn0RWFdU6HJ4qq1n52hyUNFF4bRTQHqkw3fnJEMTOqubo4StBX2GMO8F/pCn4UA8+nhzHbtvE1QE4R+ibxs2zbGwDFL5EFDdbqvLULeMfSys5pUDgx7z04oaSzh/MYvtApqOv3dxHi8HkBlCXNUMjUD6EWukcWn4IFHC9MAKzYq4JcfANNjka5ug5LUuL84GcITKqeesZzbSSUU3/OTRk4yri7QbbNKfbv3+E9rUpcQhVTVNdBo3jxqmCm25GjwmYWTLE9++UT4IiUid3Y6kAC+Xeiz2Q+9bXszj6tME1WrhKCAc6dvM6vM3neYul5xnI/K1CSq7lB8KDxCS1//7FT6EIDa4+UVSONkTrVzaVexQgt/fMO3c5TadjS8KN3Gml0DIhzahAXzp+CJ+0xgQqsTcoujRfnVCw2d3YLP6x8JKG4vPikYUhOJ1NEBuAJv1Ict1uFuIoClaw1TkoDeUU4rPcemSOb3JXRKZeIQrRGU9vOzNVfCViDYkiE3X/IbmedhTEUCAwEAAQ=="),
            new OpenTestCheckPublicKey("Mein Corona Test", "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAqefCWY5KQ6K6KYI4ioALntTWIXOpL5HU4Obh645VIY9q2gFl959I2XzNvKhqMNgvlbj91bY0Y8vQmGVVKyJs9BvKNi9TmjGBU6Jn88TP//jmi4K24QQ+PeqT2O+Jz8wnhQoW/tf9TJa7In31HJcDWkLK7USrLPyRL4vaosOPcBIRTCK0KrjZbEYikXBotiXHUIGNmlRRJzOoWYB8asDVDT+3GTKMXvOxIxRebdvkmRRUl0Wl/+oKlit6fN8XmgGxiJtFVaWMI0dec+afPJwmoGrNSiX9WlvV37x0qefWOc8AGauQ7HxmCq+RK7qz6+cRvo1xEXKcw/GDiXXKwZpOcBUogNee4fDR+WoF8auoCyisRKkqCFqZh09A8goiV3aqAK2JYNxgULoYZ/1BnFX/zldpD6PY+UGcb8RErfXs4Lj88bEBlm/aOs3n4N5yt3866ylOMofLFA2nl27857s/wwFpF0uD8AlBy3GynNFOLxOsCrnZULs/ipZbiBtmX5x71kydOldoQQF+Yrc1XKqZ62+MK9xIQIcvKk/azb7LGG8SWiHW4EbvmPzPSP6QqZslfLRbXcpc8g4ZCRNYHAfNGPwxqjQRNwTKYwPK4lFjqoI3dVrkCVI1hfEpXdBKBQ5TientoC82eeitiFaQIG5yXNnWAmf3gxDX4AltBsVafLsCAwEAAQ=="),
            new OpenTestCheckPublicKey("DM", "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA2Qg6eu+5MLfs8XZosUUOyHenh51zI4RtaXrHdNhVpHiadTO48rQU9GvDJIM6qoNFWtWMak+kvxp9qYQrCtt7YoL74GagTxhK9g4wOvBV/8AYW/asSRslpFhNi0nlKujiSdf9aKlmUouRSYO200+/8XFz+YRYhL31Srv8xEAuHjLk2wI4/d56FkjMWOxMV7aO4ClicR8WfUZzod779VpCtZY6kkhHLppQ2elLviK2SX5WjPq6srWgCYi3B0aWb/qvM1/gMs7/T/zz9WXJJeMCpElcRWVtbmYsn12wx1hZtn9RdlfpVFnQCbE8WvcvttqPspr2Z0TLgusO+1z7RiayqHVM+ai5uoAOptq4LwkJ6Hls2Aaa9+fx58lrtZ6QCK2J8aSY8z59NFeRJUMfZmTffYNG4gR9rE0hNe+u1Tg+HfFHLpPM62u3D1eCkzw7OlBaRUVlYL7LLir+WT5LP7sL2DaY2WauK6QSI603sO14c3Y8upX3SySLfjryPctzOXv0oH0RG/M2YAbX9KEImw9cYrEJjx7H9tL7QEQ1ufTh2aIeB66uiTV/Ek/lCiVuGefI2Eg0dR3iiuWXfxoqJN8f1KZoaKeIAK6V2Zf+EG15R6ClEqobGryGvcoKfpeJe0KaQSsDQ2RuveGff8Wz6qbPwu9Jvb2i++mfx1Nr22ubjwsCAwEAAQ=="),
            new OpenTestCheckPublicKey("TestNow", "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA2f7iILA7fFDXXjZSdVknvahoMrmExeB5S06E4KXKUogpkoe6AlkEQJJUhqmUrbIGBsrcSj09rz8WbArXRkGXp3WZELl4kOK/441KW5HAA9hXlXyrgdajCKfofg5CdaXhlvMotL2wBa7JKg/jCy/q1jFS78s8AzrU/CMQ/3w1PCAdRmiOpVLqz66D6+fliAz11Om8GLQUR6S9HN00hI00waxbTGwQ2d8bzXyF2V8hNa2Z3IdYkacvLRnEe4Lr66E0mqzLM0I+H12I23tiC0l7Pw/Nt8KD40zHbwfzuVQ+2K4cazsB3PJInl8HR5n2lqrTxTutm/NQGngtDWxVptnbdqDszrPGsS8OvJmt7cBWJDIV3bMvAmWW9IY3OLj8S707Cx/OETBj2d+nEbyNM2Kb9GLsYwTBIwZHmAo//uYjCyAVXgLnWyN495JZWKPJSsbSpjckqElfOVouJ+wqR+emjCRjOa5o2XH+iU+Aqca8o9c6yO8IxNkKuxTJuZri6rB3hqz3DT9GuRSI7UYHnisYeXAS1OPcEirqZrFP3jqeDaY8tCTtocqNsKD15oLLpFJrhhIG0Y2UwIY2f+WQflh9ySxtjmRGHArmWobmaBiKG0DcycD4nPbJbiNOwWRpWC0JNh6QzreAb2kxsc1rhFOATVMnSOJij3CQPgKi0+GdFmECAwEAAQ=="),
            new OpenTestCheckPublicKey("Cosiama", "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEArCAGvkp40A1W7g+dYBmdKlv4cozfsCQFRgwtq7FGd2ZN9DxRzKp0Wqv1PXuAoUyJm9PKQJjWvelf3w8ciPLYAsdsICSFFgaVpUeQxdob+D0ls9/q4B4u6nFR9te0EOwVLNJvxnBtXjkwNPOYiS9N6qsJ74gubj+VUpwJC9glSDK5DIi1p99Z/NLLiioxT0MvFr5Cr69N93d2ROemK5o+PbaPQyfrqW1DYawgZAHzx2gMiajS3lUQflwi78d0ZLWIYtSK8ynTZko7/CK3YD+jXoYrX+BIhri4j3P7KEVW2v7k94xsAl4zYeCnV9YWFgj5P9aipWS8kd6BJJkhpzfXdlm9XGOQurOXzcoumARcMxIcKSdm7daCONCFfGBpwfK1pBVHUtymEjGrgO0BLajb3F9WtTyAPCR/8QEXHeHzdi7/SlmpTq75MV0po85JhBz2cw3J4T94ERX76EfqE+F5zODj1AncMK+IiWXf7ToJkioRhPoQRUaeDuQ0RMNsdzoeNCeW+vz9ENtQaOQxKYne2655XQ470c8kBJPT0faW42CPDPA5X0k6F7oAjQxPYsWDp19V4oSYzgiF4zEk45ZcqnLTsjQTOAqNWSIN7H/OFguoadNaZssBD1k5XvRgq391QL7lQyoae47I/523e2/Xc7tLF66gTsK4F6PhD/1gOf8CAwEAAQ=="),
            new OpenTestCheckPublicKey("DRK Hannover", "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwCFC6kbek4KHCWdBATlZj5ARDXrBW9DLuANucicBTX3LwR4l24L4l/1kei+nBuagVk2KbZpAAVP3ygQ8UehnYCSap1TBLalRn5KAwzGUax+c2TmDmbnFZu957soChtA7cH4Ka1JdaQftcvoL+DghrOSw5jZ47AOJ6LeJ6ZITvU5i9krT3nM6Z9GtmG57QqTRwLVPGNB6PbQg18Ype6cZuCiqmukWtHDVWzi21wA/oZ/2KZUGmI5a46Zc2QqAK4PMfms2DsrIVn+0vcPTUjB5h1wzgvr1S/AD0yMYWmLjyW4QL3/y6uBLW1nTGpFVZ3uNmsGpsFBfrGb9YIBztGK09wIDAQAB"),
            new OpenTestCheckPublicKey("Probatix", "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAtErrLxCO1CVCYIK0iOSCyxgoqtVd8Dml8SyFt8fMKAf3sr0qhaekncCpJ9NeUEuyyD6lgJGMqka97chZHLDbSsZvahyB7mII694yaiSsRmtWnll9Gw53xT4Mvo9ATMOUq15DSHRNoVyteM+1xjNbthyQigm7/ekPfqzeLPKleszRf0yoMHpZBUH5BrSEeq34u7GpdyMlWztlttM8YYjVvnV2MUF4sIh6lGRnSp1iFDCu3sRNvM7E+UZIQVi0Mz/VxyJ2AHoIToI4Bc0PNoj92W48z/I5cBW9ZfSTljk4i51s8N56A5xiewMqW4loS6Peclyk4O1/pO1F6UjdJia1shdSK7DFh/hQdcP+8wTr/GBWUhwNzvO8WzyC7lvqasHw+E0kUW7+lGJcTsUtQqZdNUzN0CKtfIEf6KXs+jHPXojdc2eHkvc0+5OkfkEWdmLeywoP4q1CMuwntv02K/ydRvCFUsule6oYvfQY+AHb2BIFyJIBC9C67nPE/zWZPa1ExEPXWOTbG/NkL6WMQa8wLD7HFsuLzAtkGK+UmM8+E7Oukrv/0tT8wX/X0U1E3ZvJ3VRNWXiQ36MFsNeLviukUSlcdNBMOsyswwQX2fLFOC9EmX+WHDNuO3Q3RAaG5CBVVPb+R3jXR8Dd5afX86/AJuRXRrRFme/OR8UHfpDY5rsCAwEAAQ=="),
            new OpenTestCheckPublicKey("Platform-8", "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtd4EHACr6yIN9MAlUBMs6zJnaS0H1gxmE5lFWS/UwWduApvg20ia41Yo5uGRMZyvbPV+jxwfC+7zP6S6JFWaZPPSuVMITe5MxgBtpXfy4RYTUYIox1P4Q/DmUQ6sEzEyMzb6PYGqZgq52mwwPP8i58BdKJ6h/Q9litUcl2T0tOIzUR1mH4dJVC0xw+qPK3lhGSjF0ruCNkNoH7jLmDnLKidoJiKfpPH1QG22Vq0EJMm+ZyBNA9UwHXyGb8mctRmOl5VrI97nkXIkaRe1iYQ7xg2wfLI9JNpoW4ZDoyYCR9oIaO2qf+mfYbJKGmr3yyjoBB1//coiaRdckN6T3LiWbwIDAQAB"),
            new OpenTestCheckPublicKey("NoQ", "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2EqlyVSnfcss0tGFSRqlaDJs9ZBdevfKa4RkI0YM51xMk9xTNZTDCBimkN/cjJekuBlOa7PXUGd/VGO404et1/vMtLuYtvC/6fA05HZto/et6o4/UgtfBsjKWkvuGbteSYxjdn+s4GWvgkKhgZUx5R9H6E6Q1D+dvUCrJOKqy98TfrJbuZUE5xkN1+2xdfY4pJG83QcgbQdSZ4NmM2jZks8kR3wO3WdvxwPUxLeor5EB14DZY8hJG+zIzRYZ3j1TKcmk/4w4ZCgXyAl1apBxWmqkTDFq+kKUeRgjoLz7sc/kPpPRmldko/WGK4UXkOetzOlWDpLXuhVjXljLX21vZwIDAQAB"),
            new OpenTestCheckPublicKey("MeinLaborergebnis/MeinTestergebnis", "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3pxpUKBnIMjNSGBZNuUp056Ehpb27DtDQloyeympc/12w1EyrCeYRxHT0lH1G1Pc09K1svJWeEGVt1+4HQTOv5bZ3+Unc1ghGc8nQEDqb6RdOIXK5gT4kPRow9VC0K1wo3hSZTdkHTNY0mYKAjLZCYBmdZDL0QxIdTAMxZqyAED1CH+7pFbuAf59jHPgB93KXHcCc75sLmCnpVie7Ed+IlyI6bmQcsBrXl4wIAsGqc8tbUAr/pTPgGg1a/RnpasXUEmgfSPnxdXdKuVy+ZFyCQ0C2P2MIuhoFeiFshsXA2adVxyh4aivs0MGe5+YBWpYBJQwa/ukoWqpDrsZJtUKBQIDAQAB"),
            new OpenTestCheckPublicKey("Einsatz Status", "MIIBITANBgkqhkiG9w0BAQEFAAOCAQ4AMIIBCQKCAQBj6mH0W1WT1gNKzo1f3PlvrOCzlT9TdxQ7ls9zQDk6xLaOyzNY+RyN84Cy0qE5jx+4vEEu3rQ1ntXxRji7SlAJjAMzytk/GkFdsf/aK6XPYTpoG7gVz3nTDm3BhpcfoivtkbWOmiU+63O9UpaFY+o4ZlTjQDJ6tpocJCakDZ18XIDKjTjFjEQk+jPcRYpeErFQuVNsHvcHT7eDG8ezrvt7a6Ixia5le9g2TVqGxW6QMHu2jPfP/k0PRBKSB+R+xHm6zexRPzKlUsza8SIhXl15jFhD4ZRLmgqea4oSUahNxrn61NaiTG7w8ZfYcwLs5g1qwbYMTgkj5CoQAKKBITfDAgMBAAE="),
            new OpenTestCheckPublicKey("Testflow HQ", "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAyy/ZHJqqaLuo0rc9/xmqwlnyEmC2CLZzRhw7zMuYb3EB0mHKIOHk7lV1d66osu3MAPv1vj6z6n+DDwqP0A6cc7H0GH3WcWShs3Kbq36OMYkSvEb836NSGdInvJIBW4iFmM2e+6Tau/gE9ad+rsXM5r8JropfUwYRBgyCaVs3kuqVszlZMf33nDTdIBsl+yMrjJ1+sx2lq+YnIsKcxHrHOpQO/UtyJ8C8Gpncbsy8NkZm3glmI9tSjLHFdPh6Spcd+QvSB/mLeAUGCf0Jv8YO5MdVVZYr6wcOaW6yldNJuBg7LzmnWyY0+Tc5qtxojNqBKYfOg3S9NC13r5FyNi6QpYenp/549Hbq0HFgtBL0NbR54HXYATbFMyLeXqEuHdqxxTF/2biOI7nwpHr4ywGAt+c8frHEej/Q6E/pcpe8O4v3Tn8aAGXnUlSwmT1gZ8GQCJzysehyMfXP9FTEpluTjETxVr+/iHFW8oIVJJBHAZ/m+oCF/IkFFoSUa8+wwf9hLnqLWkTwzv/QHrU/LNkV5AkP4ukokzHzzUAy8sQrMk6E5nT3wd/DJMXIIeHADgQOCRhBXqRN3IfJnzjrY26xK+NfcJZhIQCXwOFzEn7hfHy+uKMETqPbAwlog4N6QhcPfIfBTkVytyU2kidHEScjzT5V99cs8Ni7GS2ld5Kh2EsCAwEAAQ=="),

            // The following key is invalid and can not be parsed:
            //            new OpenTestCheckPublicKey("WebCookies", "AAAAB3NzaC1yc2EAAAADAQABAAABgQDDJgLWdKlsv0946gFx0H9iSMj9b3QLeR4HammdjLf9ypE9qJIQZQSUap8RFVcoQpeFpnMyRVC0EHmvKPLd02HJ8m6yLnPG5ADyUWwaBVM7M/geD7uSVhgsoxJ5QA7bwu2oX0ipa3uOp/SljnAQpTEmltrSl8TMLHE4BlbdFJNkVnjWvuXLub9tgR+X6/z5z0kl68eu3XqlRx4hFs1E9fsgpD8H/K/2gb+fQguKFPx/fVxi8MvLrEyT6/Ap37utR4s5SkB2EvieJtk5zFpSMcTp44tCHblucisd4c9ws+/gSNzzWOsz/CarPThXRexqnu/FMdsNfh32b7/fq1h6sj0NgCnJlbLemOWReDramLCWMiWLGMvVkJ+Z4x21ReW2k1xcQo54f0NsUY2bCETrOmnD3g246VynqhpF1yLZevZGe02rqOubBX+vQDaN65IA6fczg2COYoOvgOdkrcCnlRLHwWw0croXPnZj7z/yocYbbxJjJCEecJ1W64qISouXubU="),
    };

    @Override
    public Single<Boolean> canParse(@NonNull String encodedData) {
        return getEncodedJwtWithoutUrl(encodedData)
                .flatMap(OpenTestCheckDocumentProvider::isJwt)
                .onErrorReturnItem(false);
    }

    @Override
    public Single<OpenTestCheckDocument> parse(@NonNull String encodedData) {
        return getEncodedJwtWithoutUrl(encodedData)
                .map(OpenTestCheckDocument::new)
                .onErrorResumeNext(throwable -> Single.error(new DocumentParsingException(throwable)));
    }

    @Override
    public Completable validate(@NonNull OpenTestCheckDocument document, @NonNull RegistrationData registrationData) {
        return verifyNameHash(document.n, registrationData);
    }

    @Override
    public Completable verify(@NonNull String encodedData) {
        return Maybe.mergeDelayError(getPublicKeys()
                .map(publicKey -> getEncodedJwtWithoutUrl(encodedData)
                        .flatMapMaybe(jwt -> verifyJwt(jwt, publicKey)
                                .andThen(Maybe.just(publicKey))
                                .onErrorResumeWith(Maybe.empty())))
                .toFlowable(BackpressureStrategy.BUFFER))
                .firstOrError()
                .ignoreElement()
                .onErrorResumeNext(throwable -> Completable.error(new DocumentVerificationException(INVALID_SIGNATURE, throwable)));
    }

    private Completable verifyJwt(@NonNull String jwt, @NonNull RSAPublicKey publicKey) {
        return Completable.fromAction(() -> Jwts.parserBuilder()
                .setSigningKey(publicKey)
                .build()
                .parseClaimsJws(jwt))
                .onErrorResumeNext(throwable -> Completable.error(new DocumentVerificationException(INVALID_SIGNATURE, throwable)));
    }

    private Completable verifyNameHash(@NonNull String expectedNameHash, @NonNull RegistrationData registrationData) {
        return generateNameHash(registrationData)
                .flatMapCompletable(actualNameHash -> Completable.fromAction(() -> {
                    if (!actualNameHash.equals(expectedNameHash)) {
                        throw new IllegalArgumentException("Name hash mismatch");
                    }
                })).onErrorResumeNext(throwable -> Completable.error(new DocumentVerificationException(NAME_MISMATCH, throwable)));
    }

    protected Single<String> generateNameHash(@NonNull RegistrationData registrationData) {
        return Single.fromCallable(() -> {
            String name = registrationData.getFirstName() + registrationData.getLastName();
            name = name.toUpperCase();
            name = name.replaceAll("[^\\x41-\\x5A]", "");
            return name.getBytes(StandardCharsets.US_ASCII);
        }).flatMap(HASH_PROVIDER::hash).map(Hex::bytesToStringLowercase);
    }

    private Single<String> getEncodedJwtWithoutUrl(@NonNull String encodedData) {
        return Single.fromCallable(() -> {
            if (encodedData.startsWith(URL_PREFIX_TESTVERIFY_IO)) {
                return encodedData.substring(URL_PREFIX_TESTVERIFY_IO.length());
            } else {
                return encodedData;
            }
        });
    }

    private Observable<RSAPublicKey> getPublicKeys() {
        return Observable.fromArray(PUBLIC_KEYS)
                .map(OpenTestCheckPublicKey::getPublicKey);
    }

    static String getUnsignedJwt(String signedJwt) {
        String[] splitToken = signedJwt.split("\\.");
        return splitToken[0] + "." + splitToken[1] + ".";
    }

    private static Single<Boolean> isJwt(String jwt) {
        return Single.fromCallable(() -> Jwts.parserBuilder()
                .build()
                .parseClaimsJwt(getUnsignedJwt(jwt)))
                .map(headerClaimsJwt -> true)
                .onErrorReturnItem(false);
    }

}
