package de.culture4life.luca.document.provider.opentestcheck;

import de.culture4life.luca.document.Document;
import de.culture4life.luca.document.provider.ProvidedDocument;
import de.culture4life.luca.util.TimeUtil;

import java.util.UUID;

import androidx.annotation.NonNull;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import timber.log.Timber;

public class OpenTestCheckDocument extends ProvidedDocument {

    Integer v;
    String n;
    Integer t;
    String c;
    String r;
    String l;
    String d;
    String ed;

    public OpenTestCheckDocument(@NonNull String encodedJwt) {
        String unsignedJwt = OpenTestCheckDocumentProvider.getUnsignedJwt(encodedJwt);
        Claims claims = Jwts.parserBuilder()
                .build()
                .parseClaimsJwt(unsignedJwt)
                .getBody();

        v = claims.get("v", Integer.class);
        if (v == null || v != 2) {
            throw new IllegalArgumentException("Invalid test version number: " + v);
        }

        // hashed name
        n = claims.get("n", String.class);

        // encrypted private data
        ed = claims.get("ed", String.class);

        // type
        c = claims.get("c", String.class);
        if ("f".equals(c)) {
            document.setType(Document.TYPE_FAST);
        } else if ("p".equals(c)) {
            document.setType(Document.TYPE_PCR);
        } else if ("e".equals(c) || "r".equals(c) || "v".equals(c)) {
            // probably EM green pass, will be checked with lab name
            document.setType(Document.TYPE_UNKNOWN);
        } else if ("o".equals(c)) {
            document.setType(Document.TYPE_UNKNOWN);
        } else {
            throw new IllegalArgumentException("Invalid test category: " + c);
        }

        // outcome
        r = claims.get("r", String.class);
        if ("n".equals(r)) {
            document.setOutcome(Document.OUTCOME_NEGATIVE);
        } else if ("p".equals(r)) {
            document.setOutcome(Document.OUTCOME_POSITIVE);
        } else if ("u".equals(r)) {
            document.setOutcome(Document.OUTCOME_UNKNOWN);
        } else {
            throw new IllegalStateException("Invalid document: " + r);
        }

        // timestamps
        t = claims.get("t", Integer.class);
        if (t == null || t == 0) {
            throw new IllegalArgumentException("Invalid test timestamp: " + t);
        }
        document.setResultTimestamp(TimeUtil.convertFromUnixTimestamp(t).blockingGet());
        document.setTestingTimestamp(document.getResultTimestamp());
        document.setImportTimestamp(System.currentTimeMillis());

        // lab name
        l = claims.get("l", String.class);
        if (l == null || l.isEmpty()) {
            Timber.w("Missing lab name");
        }
        l = l.trim().replaceAll(" {2,}", System.lineSeparator());
        document.setLabName(l);
        if (l.startsWith("DFB") && document.getType() == Document.TYPE_UNKNOWN) {
            document.setType(Document.TYPE_GREEN_PASS);
        }

        // lab doctor name
        d = claims.get("d", String.class);
        if (d == null || d.isEmpty()) {
            Timber.w("Missing lab doctor name");
        }
        document.setLabDoctorName(d);

        document.setEncodedData(encodedJwt);
        document.setHashableEncodedData(getHeaderAndBody(encodedJwt));
        document.setId(UUID.nameUUIDFromBytes(document.getHashableEncodedData().getBytes()).toString());
    }

    protected static String getHeaderAndBody(@NonNull String encodedJwt) {
        String[] parts = encodedJwt.split("\\.");
        return parts[0] + "." + parts[1];
    }

}
