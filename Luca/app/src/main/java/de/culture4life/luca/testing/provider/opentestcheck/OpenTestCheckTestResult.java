package de.culture4life.luca.testing.provider.opentestcheck;

import com.auth0.jwt.JWT;
import com.auth0.jwt.interfaces.DecodedJWT;

import de.culture4life.luca.testing.TestResult;
import de.culture4life.luca.testing.provider.ProvidedTestResult;
import de.culture4life.luca.util.TimeUtil;

import java.util.UUID;

import androidx.annotation.NonNull;
import timber.log.Timber;

public class OpenTestCheckTestResult extends ProvidedTestResult {

    Integer v;
    String n;
    Integer t;
    String c;
    String r;
    String l;
    String d;
    String ed;

    public OpenTestCheckTestResult(@NonNull String encodedJwt) {
        DecodedJWT jwt = JWT.decode(encodedJwt);

        v = jwt.getClaim("v").asInt();
        if (v == null || v != 2) {
            throw new IllegalArgumentException("Invalid test version number: " + v);
        }

        // hashed name
        n = jwt.getClaim("n").asString();

        // encrypted private data
        ed = jwt.getClaim("ed").asString();

        // type
        c = jwt.getClaim("c").asString();
        if ("f".equals(c)) {
            lucaTestResult.setType(TestResult.TYPE_FAST);
        } else if ("p".equals(c)) {
            lucaTestResult.setType(TestResult.TYPE_PCR);
        } else if ("e".equals(c) || "r".equals(c) || "v".equals(c)) {
            // probably EM green pass, will be checked with lab name
            lucaTestResult.setType(TestResult.TYPE_UNKNOWN);
        } else if ("o".equals(c)) {
            lucaTestResult.setType(TestResult.TYPE_UNKNOWN);
        } else {
            throw new IllegalArgumentException("Invalid test category: " + c);
        }

        // outcome
        r = jwt.getClaim("r").asString();
        if ("n".equals(r)) {
            lucaTestResult.setOutcome(TestResult.OUTCOME_NEGATIVE);
        } else if ("p".equals(r)) {
            lucaTestResult.setOutcome(TestResult.OUTCOME_POSITIVE);
        } else if ("u".equals(r)) {
            lucaTestResult.setOutcome(TestResult.OUTCOME_UNKNOWN);
        } else {
            throw new IllegalStateException("Invalid test result: " + r);
        }

        // timestamps
        t = jwt.getClaim("t").asInt();
        if (t == null || t == 0) {
            throw new IllegalArgumentException("Invalid test timestamp: " + t);
        }
        lucaTestResult.setResultTimestamp(TimeUtil.convertFromUnixTimestamp(t).blockingGet());
        lucaTestResult.setTestingTimestamp(lucaTestResult.getResultTimestamp());
        lucaTestResult.setImportTimestamp(System.currentTimeMillis());

        // lab name
        l = jwt.getClaim("l").asString();
        if (l == null || l.isEmpty()) {
            Timber.w("Missing lab name");
        }
        l = l.trim().replaceAll(" {2,}", System.lineSeparator());
        lucaTestResult.setLabName(l);
        if (l.startsWith("DFB") && lucaTestResult.getType() == TestResult.TYPE_UNKNOWN) {
            lucaTestResult.setType(TestResult.TYPE_GREEN_PASS);
        }

        // lab doctor name
        d = jwt.getClaim("d").asString();
        if (d == null || d.isEmpty()) {
            Timber.w("Missing lab doctor name");
        }
        lucaTestResult.setLabDoctorName(d);

        lucaTestResult.setEncodedData(encodedJwt);
        lucaTestResult.setHashableEncodedData(getHeaderAndBody(encodedJwt));
        lucaTestResult.setId(UUID.nameUUIDFromBytes(lucaTestResult.getHashableEncodedData().getBytes()).toString());
    }

    protected static String getHeaderAndBody(@NonNull String encodedJwt) {
        String[] parts = encodedJwt.split("\\.");
        return parts[0] + "." + parts[1];
    }

}
